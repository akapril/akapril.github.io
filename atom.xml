<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://akapril.github.io</id>
    <title>Akapril</title>
    <updated>2023-01-16T01:38:56.827Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://akapril.github.io"/>
    <link rel="self" href="https://akapril.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://akapril.github.io/images/avatar.png</logo>
    <icon>https://akapril.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, Akapril</rights>
    <entry>
        <title type="html"><![CDATA[Wails实现读取本地文件]]></title>
        <id>https://akapril.github.io/wails-read-local-file/</id>
        <link href="https://akapril.github.io/wails-read-local-file/">
        </link>
        <updated>2023-01-05T06:59:36.000Z</updated>
        <summary type="html"><![CDATA[<h4 id="问题">问题</h4>
<p>通过typescript读取本地文件会出现 allow access</p>
<h4 id="思路">思路</h4>
<p>可以使用Go文件服务器使文件可通过http的形式访问到。</p>
]]></summary>
        <content type="html"><![CDATA[<h4 id="问题">问题</h4>
<p>通过typescript读取本地文件会出现 allow access</p>
<h4 id="思路">思路</h4>
<p>可以使用Go文件服务器使文件可通过http的形式访问到。</p>
<!-- more -->
<h4 id="解决">解决</h4>
<pre><code class="language-go">// app.go
type App struct {
	ctx   context.Context
	mux   *http.ServeMux // 定义文件服务器
	paths map[string]string  // 存储路由地址
}

// startup is called when the app starts. The context is saved
// so we can call the runtime methods
func (a *App) startup(ctx context.Context) {
	a.ctx = ctx
	a.mux = http.NewServeMux()
	a.mux.Handle(&quot;/&quot;, http.StripPrefix(&quot;/&quot;, http.FileServer(http.Dir(&quot;/&quot;))))
	if err := http.ListenAndServe(&quot;:3008&quot;, a.mux); err != nil {
		log.Fatal(err)
	}
}
...

// ReadImage 读取文件
func (a *App) ReadImage(name string) string {
	p, _ := filepath.Abs(filepath.Dir(name))
	var split []string
	var pathPre string
	if strings.Contains(p, &quot;:&quot;) {
		split = strings.Split(p, &quot;:&quot;)

		if &quot;&quot; == a.paths[split[0]] {
			if nil == a.paths {
				a.paths = make(map[string]string)
			}
			a.paths[split[0]] = split[0]
			a.mux.Handle(&quot;/&quot;+split[0]+&quot;/&quot;, http.StripPrefix(&quot;/&quot;+split[0]+&quot;/&quot;, http.FileServer(http.Dir(split[0]+&quot;:&quot;))))
		}
		pathPre = split[0] + &quot;\\&quot; + split[1] + &quot;\\&quot;
	} else {
		splits := strings.Split(p, &quot;\\&quot;)

		split = append(split, splits[2])
		var temp string
		for _, item := range splits[4:] {
			if temp == &quot;&quot; {
				temp = item
			} else {
				temp = temp + &quot;\\&quot; + item

			}
		}
		split = append(split, temp)

		if &quot;&quot; == a.paths[split[0]] {
			if nil == a.paths {
				a.paths = make(map[string]string)
			}
			a.paths[split[0]] = split[0]
            // TODO 设置共享目录读取 暂时只能写死
			a.mux.Handle(&quot;/&quot;+split[0]+&quot;/&quot;, http.StripPrefix(&quot;/&quot;+split[0]+&quot;/&quot;, http.FileServer(http.Dir(&quot;\\\\x.x.x.x\\测试&quot;))))
		}
		pathPre = split[0] + &quot;\\&quot; + split[1] + &quot;\\&quot;
	}

	log.Println(pathPre + filepath.Base(name))
	return pathPre + filepath.Base(name)
}
</code></pre>
<p>定义触发设置路由方法</p>
<pre><code class="language-typescript">// App.d.ts
export function ReadImage(arg1:string):Promise&lt;string&gt;;
// App.js
export function ReadImage(arg1) {
  return window['go']['main']['App']['ReadImage'](arg1);
}
</code></pre>
<pre><code class="language-go">// 定义go方法触发
runtime.EventsEmit(app.ctx, &quot;setPhoto&quot;, strings)
</code></pre>
<pre><code class="language-javascript">// 接收触发的回调
window.runtime.EventsOn(&quot;setPhoto&quot;, function (e) {
      e.map((item) =&gt; {
    ReadImage(item).then((data) =&gt; {
      let url = &quot;http://localhost:3008/&quot; + data
        console.log(url)
    });
  })
})
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Wails学习记录]]></title>
        <id>https://akapril.github.io/wails-learn/</id>
        <link href="https://akapril.github.io/wails-learn/">
        </link>
        <updated>2023-01-05T06:33:09.000Z</updated>
        <summary type="html"><![CDATA[<h4 id="依赖">依赖</h4>
<p>Go 1.18+<br>
NPM (Node 15+)</p>
]]></summary>
        <content type="html"><![CDATA[<h4 id="依赖">依赖</h4>
<p>Go 1.18+<br>
NPM (Node 15+)</p>
<!-- more -->
<h4 id="生成项目">生成项目</h4>
<p>使用 JavaScript 生成一个 Vue 项目:</p>
<pre><code class="language-bash">wails init -n myproject -t vue
</code></pre>
<p>如果您更愿意使用 TypeScript:</p>
<pre><code class="language-bash">wails init -n myproject -t vue-ts
</code></pre>
<h4 id="参考地址">参考地址：</h4>
<p><a href="https://wails.io/zh-Hans/">https://wails.io/zh-Hans/</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go使用imagick实现图片合并拼接并保留原图属性]]></title>
        <id>https://akapril.github.io/golang-imagick-composite-image/</id>
        <link href="https://akapril.github.io/golang-imagick-composite-image/">
        </link>
        <updated>2022-10-16T03:03:58.000Z</updated>
        <summary type="html"><![CDATA[<h4 id="问题">问题</h4>
<p>需要将两张图片拼接成一张图，并保证拼接完成的图片，保留指定图片的原有属性。水平分辨率、垂直分辨率不改变。</p>
]]></summary>
        <content type="html"><![CDATA[<h4 id="问题">问题</h4>
<p>需要将两张图片拼接成一张图，并保证拼接完成的图片，保留指定图片的原有属性。水平分辨率、垂直分辨率不改变。</p>
<!-- more -->
<p>使用<code>Go</code>自带<code>image</code>类库，生成的图片水平、垂直分辨率被改为了<code>96dpi</code>。<br>
<img src="https://azrael-1252339850.cos.ap-chengdu.myqcloud.com/picgo/20221016111743.png" alt="原图属性" loading="lazy"><br>
<img src="https://azrael-1252339850.cos.ap-chengdu.myqcloud.com/picgo/20221016111830.png" alt="合并完成后图片属性" loading="lazy"></p>
<h4 id="解决">解决</h4>
<h5 id="安装go-imagick">安装<code>Go imagick</code></h5>
<p>依赖</p>
<ul>
<li>安装<a href="http://www.msys2.org/">msys2</a></li>
</ul>
<pre><code class="language-shell"># 运行msys2 在msys2终端指定
pacman -Syuu
pacman -S mingw-w64-x86_64-gcc
pacman -S mingw-w64-x86_64-pkg-config
pacman -S mingw-w64-x86_64-zlib
pacman -S mingw-w64-x86_64-imagemagick
</code></pre>
<ul>
<li>配置环境变量</li>
</ul>
<pre><code class="language-shell"># &lt;msys64&gt; 为msys2安装路径
PATH=&lt;msys64&gt;\mingw64\bin;%PATH%
PKG_CONFIG_PATH=&lt;msys64&gt;\mingw64\lib\pkgconfig
MAGICK_CODER_MODULE_PATH=&lt;msys64&gt;\mingw64\lib\ImageMagick-7.0.6\modules-Q16HDRI\coders
</code></pre>
<ul>
<li>项目中使用</li>
</ul>
<pre><code class="language-shell">go build gopkg.in/gographics/imagick.v3/imagick
</code></pre>
<h5 id="使用">使用</h5>
<pre><code class="language-go">// 使用imgick对底图进行拓展，然后将第二张图片和底图进行拼接。
func MergeImagick() error {
	imagick.Initialize()
	defer imagick.Terminate()
	var err error
    // 加载底图
	bg := imagick.NewMagickWand()
	err = bg.ReadImage(&quot;resource/bg.jg&quot;)
	w := bg.GetImageWidth()
	h := bg.GetImageHeight()
    // 加载第二张图片
	code := imagick.NewMagickWand()
	err = code.ReadImage(&quot;resource/qrcode.png&quot;)
    // 扩展底图高度
	err = bg.ExtentImage(w, h+100, 0, 0)
    // 合成两张图片 imagick.COMPOSITE_OP_OVER  code 覆盖 bg 第二张图覆盖在底图上
	err = bg.CompositeImage(code, imagick.COMPOSITE_OP_OVER, true, 0, int(h))
    // 生成图片
	err = bg.WriteImage(&quot;resource/newpic.jpg&quot;)
    // 销毁
	bg.Destroy()
	code.Destroy()
	imagick.Terminate()

	return err
}
</code></pre>
<h4 id="结果">结果</h4>
<p>使用<code>imagick</code>拼接后的图片保留了底图的属性，除了扩展后高度的增加。<br>
<img src="https://azrael-1252339850.cos.ap-chengdu.myqcloud.com/picgo/20221016111743.png" alt="原图属性" loading="lazy"><br>
<img src="https://azrael-1252339850.cos.ap-chengdu.myqcloud.com/picgo/20221016133122.png" alt="拼接后图片属性" loading="lazy"></p>
<h4 id="后续">后续</h4>
<p>代码打包可执行文件，运行出现找不到<code>dll</code>情况，暂且不清楚所需要<code>dll</code>。改为调用<code>magick</code>程序。</p>
<h5 id="安装imagemagick">安装ImageMagick</h5>
<p>下载地址: <a href="https://imagemagick.org/script/download.php#windows">https://imagemagick.org/script/download.php#windows</a></p>
<p>安装成功后进入终端执行以下命令，</p>
<pre><code class="language-shell">magick -version
</code></pre>
<p>返回ImageMagick版本信息则为正常。</p>
<pre><code>Version: ImageMagick 7.1.0-50 Q16-HDRI x64 f032690:20221008 https://imagemagick.org
Copyright: (C) 1999 ImageMagick Studio LLC
License: https://imagemagick.org/script/license.php
Features: Cipher DPC HDRI Modules OpenCL OpenMP(2.0)
Delegates (built-in): bzlib cairo flif freetype gslib heic jng jp2 jpeg jxl lcms lqr lzma openexr pangocairo png ps raqm raw rsvg tiff webp xml zip zlib
Compiler: Visual Studio 2022 (193331630)
</code></pre>
<h5 id="代码">代码</h5>
<pre><code class="language-go">func MergeImagickInstall(url string) error {
	// 打开底图
	bg, _ := os.Open(url)
	bgpic, _ := jpeg.Decode(bg)
	defer bg.Close()
	// 获取底图尺寸
	bgpicBounds := bgpic.Bounds()
	resize := strconv.Itoa(bgpicBounds.Size().X) + `x` + strconv.Itoa(bgpicBounds.Size().Y+100)
	// 首先将底图拓展
	extentShell := `magick ` + url + `  -background white -extent ` + resize + `  resource/output.jpg`
	extentShellCmd := exec.Command(&quot;cmd.exe&quot;, &quot;/c&quot;, extentShell)
	extentShellCmd.SysProcAttr = &amp;syscall.SysProcAttr{HideWindow: true}
	err := extentShellCmd.Run()
	if err != nil {
		log.Println(err)
	}
	// 然后将第二张图片的位置设置在 x 0 y 底图高度 的位置并合成
	compositeShell := `magick composite -geometry +0+` + strconv.Itoa(bgpicBounds.Size().Y) + ` resource/qrcode.png resource/output.jpg resource/output.jpg`
	compositeShellCmd := exec.Command(&quot;cmd.exe&quot;, &quot;/c&quot;, compositeShell)
	compositeShellCmd.SysProcAttr = &amp;syscall.SysProcAttr{HideWindow: true}
	err = compositeShellCmd.Run()
	if err != nil {
		log.Println(err)
	}
	return err
}
</code></pre>
<h4 id="参考链接">参考链接</h4>
<p><a href="https://pkg.go.dev/gopkg.in/gographics/imagick.v3">https://pkg.go.dev/gopkg.in/gographics/imagick.v3</a><br>
<a href="https://github.com/gographics/imagick">https://github.com/gographics/imagick</a><br>
<a href="https://www.imagemagick.org/MagickWand/">https://www.imagemagick.org/MagickWand/</a><br>
<a href="https://blog.csdn.net/qq_24127015/article/details/86525305">https://blog.csdn.net/qq_24127015/article/details/86525305</a><br>
<a href="https://imagemagick.org/script/magick.php">https://imagemagick.org/script/magick.php</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux修改ls命令的时间显示格式]]></title>
        <id>https://akapril.github.io/linux-ls-command-date/</id>
        <link href="https://akapril.github.io/linux-ls-command-date/">
        </link>
        <updated>2020-11-22T05:52:31.000Z</updated>
        <summary type="html"><![CDATA[<p>linux修改ls命令的时间显示格式</p>
]]></summary>
        <content type="html"><![CDATA[<p>linux修改ls命令的时间显示格式</p>
<!--more-->
<p>vim编辑 .bashrc，添加两条，然后:wq保存：</p>
<pre><code>alias date='date +&quot;%T %F&quot;'
alias ls='ls --color=auto --time-style +&quot;%T %F&quot;'
</code></pre>
<p>或使用cat 追加：</p>
<pre><code class="language-shell">cat &gt;&gt; .bashrc &lt;&lt; EOF
alias date='date +&quot;%T %F&quot;'
alias ls='ls --color=auto --time-style +&quot;%T %F&quot;'
EOF
</code></pre>
<p>参考文档:</p>
<p><a href="https://www.cnblogs.com/valiantjiang/p/5085576.html">https://www.cnblogs.com/valiantjiang/p/5085576.html</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux日志清理]]></title>
        <id>https://akapril.github.io/linux-log-clean/</id>
        <link href="https://akapril.github.io/linux-log-clean/">
        </link>
        <updated>2020-11-22T05:45:55.000Z</updated>
        <summary type="html"><![CDATA[<p>Linux日志清理</p>
]]></summary>
        <content type="html"><![CDATA[<p>Linux日志清理</p>
<!-- more -->
<p>用echo命令，将空字符串内容重定向到指定文件中</p>
<pre><code class="language-shell">echo &quot;&quot; &gt; system.journal
</code></pre>
<p>说明：此方法只会清空一次，一段时间后还要再次手动清空很麻烦，这里可以用以下命令让journalctl自动维护空间</p>
<p>journalctl命令自动维护文件大小</p>
<p>只保留近一周的日志</p>
<pre><code class="language-shell">journalctl --vacuum-time=1w
</code></pre>
<p>只保留500MB的日志</p>
<pre><code class="language-shell">journalctl --vacuum-size=500M
</code></pre>
<p>参考文档:</p>
<p><a href="https://cloud.tencent.com/developer/article/1423873">https://cloud.tencent.com/developer/article/1423873</a></p>
<p><a href="https://www.cnblogs.com/sparkdev/p/8795141.html">https://www.cnblogs.com/sparkdev/p/8795141.html</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Elasticsearch异常maximum allowed to be analyzed for highlighting解决]]></title>
        <id>https://akapril.github.io/elasticsearch-error-1/</id>
        <link href="https://akapril.github.io/elasticsearch-error-1/">
        </link>
        <updated>2020-09-13T05:25:29.000Z</updated>
        <summary type="html"><![CDATA[<h4 id="问题">问题</h4>
<p>根据指定字段进行模糊查询，进行查询后报错：</p>
]]></summary>
        <content type="html"><![CDATA[<h4 id="问题">问题</h4>
<p>根据指定字段进行模糊查询，进行查询后报错：</p>
<!-- more -->
<pre><code class="language-json">{&quot;type&quot;:&quot;illegal_argument_exception&quot;,&quot;reason&quot;:&quot;The length of [message] field of [SY_yKc9yQj6HAx8MKMt1pQ] doc of [syslog] index has exceeded [1000000] - maximum allowed to be analyzed for highlighting. This maximum can be set by changing the [index.highlight.max_analyzed_offset] index level setting. For large texts, indexing with offsets or term vectors is recommended!”}}
</code></pre>
<h4 id="原因">原因</h4>
<p>索引偏移量默认是<code>100000</code>，当前索引偏移量超过默认值。</p>
<h4 id="解决">解决</h4>
<p>修改索引偏移量</p>
<pre><code class="language-shell">curl -XPUT &quot;http://127.0.0.1:9200/_settings&quot; -H 'Content-Type: application/json' -d' {
    &quot;index&quot; : {
        &quot;highlight.max_analyzed_offset&quot; : 100000000
    }
}
</code></pre>
<p>参考文档：</p>
<p><a href="https://www.cnblogs.com/zhanchenjin/archive/2019/10/14/11672900.html">https://www.cnblogs.com/zhanchenjin/archive/2019/10/14/11672900.html</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[acme.sh免费https证书]]></title>
        <id>https://akapril.github.io/acme-sh-free-ssl/</id>
        <link href="https://akapril.github.io/acme-sh-free-ssl/">
        </link>
        <updated>2020-09-12T05:10:43.000Z</updated>
        <content type="html"><![CDATA[<h4 id="安装acmesh">安装acme.sh</h4>
<pre><code class="language-shell">curl https://get.acme.sh | sh
</code></pre>
<p>或者</p>
<pre><code class="language-shell">wget -O - https://get.acme.sh | sh
</code></pre>
<p>最好使用第二个命令，原因：<strong>wget</strong> 命令用来从指定的<strong>URL</strong>下载文件。<strong>wget</strong>非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性，如果是由于网络的原因下载失败，<strong>wget</strong>会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。这对从那些限定了链接时间的服务器上下载大文件非常有用。</p>
<p>添加环境变量：</p>
<p><code>/etc/profile</code>中添加<code>alias acme.sh=~/.acme.sh/acme.sh</code>，保存后执行<code>source /etc/profile</code>加载配置。</p>
<h4 id="生成证书">生成证书</h4>
<p><strong>http</strong></p>
<p><code>-d</code>参数后为需要生成https证书的域名，<code>--webroot</code>参数为网站跟目录， 然后自动完成验证.</p>
<pre><code class="language-shell">acme.sh  --issue  -d mydomain.com -d www.mydomain.com  --webroot  /home/wwwroot/mydomain.com/
</code></pre>
<p><strong>apache</strong>服务器</p>
<pre><code class="language-shell">acme.sh --issue  -d mydomain.com   --apache
</code></pre>
<p><strong>nginx</strong>服务器</p>
<pre><code class="language-shell">acme.sh --issue  -d mydomain.com   --nginx
</code></pre>
<p>无<strong>web</strong>服务器,根据域名生成</p>
<pre><code class="language-shell">acme.sh  --issue -d mydomain.com   --standalone
</code></pre>
<p><strong>dns</strong></p>
<p>无需服务器</p>
<pre><code class="language-shell">acme.sh  --issue  --dns   -d mydomain.com
</code></pre>
<p>然后, <strong>acme.sh</strong> 会生成相应的解析记录显示出来, 你只需要在你的域名管理面板中添加这条 txt 记录即可.</p>
<p>等待解析完成之后, 重新生成证书:</p>
<pre><code class="language-shell">acme.sh  --renew   -d mydomain.com
</code></pre>
<p><strong>dns</strong> 方式的真正强大之处在于可以使用域名解析商提供的<strong>api</strong> 自动添加 txt 记录完成验证.</p>
<p><strong>acme.sh</strong> 目前支持 <strong>cloudflare</strong>, <strong>dnspod</strong>, <strong>cloudxns</strong>, <strong>godaddy</strong> 以及 <strong>ovh</strong> 等数十种解析商的自动集成.</p>
<p>以 <strong>dnspod</strong> 为例, 你需要先登录到 <strong>dnspod</strong> 账号, 生成你的 <strong>api id</strong> 和 <strong>api key</strong>, 都是免费的. 然后:</p>
<pre><code class="language-shell">export DP_Id=&quot;1234&quot;

export DP_Key=&quot;sADDsdasdgdsf&quot;

acme.sh   --issue   --dns dns_dp   -d aa.com  -d www.aa.com
</code></pre>
<p>证书就会自动生成了. 这里给出的 <strong>api id <strong>和 <strong>api key</strong> 会被自动记录下来, 将来你在使用</strong>dnspod api</strong> 的时候, 就不需要再次指定了. 直接生成就好了:</p>
<pre><code class="language-shell">acme.sh  --issue   -d  mydomain2.com   --dns  dns_dp
</code></pre>
<p>更多：<a href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi">https://github.com/acmesh-official/acme.sh/wiki/dnsapi</a></p>
<h4 id="copy安装证书">copy/安装证书</h4>
<p>默认生成的证书都放在安装目录下: <code>~/.acme.sh/</code>,请不要直接使用此目录下的文件, 例如: 不要直接让 nginx/apache 的配置文件使用这下面的文件. 这里面的文件都是内部使用, 而且目录结构可能会变化.</p>
<p>正确的使用方法是使用 <code>--install-cert</code> 命令,并指定目标位置, 然后证书文件会被copy到相应的位置, 例如:</p>
<p><strong>Apache example</strong>:</p>
<pre><code>acme.sh --install-cert -d mydomain.com \
--cert-file      /path/to/certfile/in/apache/cert.pem  \
--key-file       /path/to/keyfile/in/apache/key.pem  \
--fullchain-file /path/to/fullchain/certfile/apache/fullchain.pem \
--reloadcmd     &quot;service apache2 force-reload&quot;
</code></pre>
<p><strong>Nginx example</strong>:</p>
<pre><code>acme.sh --install-cert -d example.com \
--key-file       /path/to/keyfile/in/nginx/key.pem  \
--fullchain-file /path/to/fullchain/nginx/cert.pem \
--reloadcmd     &quot;service nginx force-reload&quot;
</code></pre>
<p>(一个小提醒, 这里用的是 <code>service nginx force-reload</code>, 不是 <code>service nginx reload</code>, 据测试, <code>reload</code> 并不会重新加载证书, 所以用的 <code>force-reload</code>)</p>
<p><strong>Nginx</strong> 的配置 <code>ssl_certificate</code> 使用 <code>/etc/nginx/ssl/fullchain.cer</code> ，而非 <code>/etc/nginx/ssl/&lt;domain&gt;.cer</code> ，否则 <a href="https://www.ssllabs.com/ssltest/">SSL Labs</a> 的测试会报 <code>Chain issues Incomplete</code> 错误。</p>
<p><code>--install-cert</code>命令可以携带很多参数, 来指定目标文件. 并且可以指定 reloadcmd, 当证书更新以后, reloadcmd会被自动调用,让服务器生效.</p>
<p><strong>Nginx</strong>配置</p>
<pre><code class="language-properties">server {
        listen 443 ssl;
        server_name www.mydomain.com;
        
        ssl_certificate /path/to/keyfile/in/nginx/cert.pem;
        ssl_certificate_key /path/to/fullchain/nginx/key.pem;
        ssl_session_timeout  5m;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;     #指定SSL服务器端支持的协议版本
        ssl_ciphers  HIGH:!aNULL:!MD5;
        #ssl_ciphers  ALL：!ADH：!EXPORT56：RC4+RSA：+HIGH：+MEDIUM：+LOW：+SSLv2：+EXP;    #指定加密算法
        ssl_prefer_server_ciphers   on;    #在使用SSLv3和TLS协议时指定服务器的加密算法要优先于客户端的加密算法
}
</code></pre>
<h4 id="续期证书">续期证书</h4>
<p>目前证书在 60 天以后会自动更新, 你无需任何操作. 今后有可能会缩短这个时间, 不过都是自动的, 你不用关心.</p>
<h4 id="更新acmesh">更新acme.sh</h4>
<p>目前由于 <strong>acme</strong> 协议和 <strong>letsencrypt CA</strong> 都在频繁的更新, 因此 <strong>acme.sh</strong> 也经常更新以保持同步.</p>
<p>升级 acme.sh 到最新版 :</p>
<pre><code>acme.sh --upgrade
</code></pre>
<p>如果你不想手动升级, 可以开启自动升级:</p>
<pre><code>acme.sh  --upgrade  --auto-upgrade
</code></pre>
<p>之后, <strong>acme.sh</strong> 就会自动保持更新了.</p>
<p>你也可以随时关闭自动更新:</p>
<pre><code>acme.sh --upgrade  --auto-upgrade  0
</code></pre>
<h4 id="错误">错误</h4>
<p>如果出错, 请添加 <strong>debug log</strong>：</p>
<pre><code>acme.sh  --issue  .....  --debug 
</code></pre>
<p>或者：</p>
<pre><code>acme.sh  --issue  .....  --debug  2
</code></pre>
<p>请参考： https://github.com/Neilpang/acme.sh/wiki/How-to-debug-acme.sh</p>
<p>更高级的用法请参看其他 **wiki **页面.</p>
<p>https://github.com/Neilpang/acme.sh/wiki</p>
<p>参考文档:</p>
<p><a href="https://github.com/acmesh-official/acme.sh">https://github.com/acmesh-official/acme.sh</a></p>
<p><a href="https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E">https://github.com/acmesh-official/acme.sh/wiki/说明</a></p>
<p><a href="https://segmentfault.com/a/1190000022263697">https://segmentfault.com/a/1190000022263697</a></p>
<p><a href="https://github.com/acmesh-official/acme.sh/wiki/dnsapi">https://github.com/acmesh-official/acme.sh/wiki/dnsapi</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Elasticsearch异常 Data too large]]></title>
        <id>https://akapril.github.io/elasticsearch-error-2/</id>
        <link href="https://akapril.github.io/elasticsearch-error-2/">
        </link>
        <updated>2020-08-13T05:35:44.000Z</updated>
        <summary type="html"><![CDATA[<h4 id="问题">问题</h4>
<p>使用<code>canal</code>向<code>elasticsearch</code>同步数据时，出现：</p>
]]></summary>
        <content type="html"><![CDATA[<h4 id="问题">问题</h4>
<p>使用<code>canal</code>向<code>elasticsearch</code>同步数据时，出现：</p>
<!-- more -->
<pre><code> Data too large, data for [&lt;transport_request&gt;] would be [256669646/244.7mb], which is larger than the limit of [255013683/243.1mb], real usage: [256666520/244.7mb], new bytes reserved: [3126/3kb], usages [request=0/0b, fielddata=4812/4.6kb, in_flight_requests=3126/3kb, accounting=6615462/6.3mb]
</code></pre>
<h4 id="原因">原因</h4>
<p>堆内存不够当前查询加载数据所以会报错。</p>
<h4 id="解决">解决</h4>
<p>提高堆栈内存</p>
<p>修改<code>elasticsearch</code>的<code>config</code>目录下的<code>jvm.options</code>:</p>
<pre><code class="language-properties">################################################################
## IMPORTANT: JVM heap size
################################################################
##
## You should always set the min and max JVM heap
## size to the same value. For example, to set
## the heap to 4 GB, set:
##
## -Xms4g
## -Xmx4g
##
## See https://www.elastic.co/guide/en/elasticsearch/reference/current/heap-size.html
## for more information
##
################################################################

# Xms represents the initial size of total heap space
# Xmx represents the maximum size of total heap space

-Xms4g
-Xmx6g
</code></pre>
<p>然后重启<code>elasticsearch</code>。</p>
<p>增加堆内存使用率，默认70%，修改为90%：</p>
<pre><code class="language-shell">curl -X PUT &quot;http://127.0.0.1:9200/_cluster/settings&quot; -H 'Content-Type: application/json' -d'
 {
     &quot;transient&quot; : {
         &quot;indices.breaker.total.limit&quot; : &quot;90%&quot;
     }
 }
</code></pre>
<p>参考文档:</p>
<p><a href="https://github.com/docker-library/elasticsearch/issues/98">https://github.com/docker-library/elasticsearch/issues/98</a></p>
<p><a href="https://www.cnblogs.com/zhanchenjin/archive/2019/10/14/11672900.html">https://www.cnblogs.com/zhanchenjin/archive/2019/10/14/11672900.html</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker安装Elasticsearch集群]]></title>
        <id>https://akapril.github.io/elasticsearch-cluster-install/</id>
        <link href="https://akapril.github.io/elasticsearch-cluster-install/">
        </link>
        <updated>2020-07-20T05:58:19.000Z</updated>
        <summary type="html"><![CDATA[<h4 id="准备">准备</h4>
<p>准备三个<code>elasticsearch</code>节点的配置，放在<code>/etc/elasticsearch/</code>目录下。</p>
]]></summary>
        <content type="html"><![CDATA[<h4 id="准备">准备</h4>
<p>准备三个<code>elasticsearch</code>节点的配置，放在<code>/etc/elasticsearch/</code>目录下。</p>
<!-- more -->
<pre><code class="language-yaml">#elasticsearch1.yml
# 集群名，三份配置相同
cluster.name: es-cluster-cen
# 节点名，同一个集群的节点名字不能相同
node.name: node-1
# 该节点是否有资格竞选成为主节点
node.master: true
# 该节点是否作为数据节点
node.data: true
# 一台服务器能运行的节点数，根据需要调整
node.max_local_storage_nodes: 3
# 索引数据存储的位置
path.data: /usr/share/elasticsearch/data
# 日志路径
path.logs: /usr/share/elasticsearch/log
# 网关地址
network.host: 0.0.0.0
# 和其他节点通信的地址,如果不设置的话会自动获取
network.publish_host: x.x.x.x
# 定义http传输监听的端口
http.port: 9200
# 设置节点之间通信的端口
transport.tcp.port: 9300
# 7.x新配置，写入候选主节点的设备地址，在开启服务后可以被选为主节点
discovery.seed_hosts: [&quot;x.x.x.x:9300&quot;,&quot;y.y.y.y:9301&quot;,&quot;z.z.z.z:9302&quot;]
# 与上一个配置类似，这里用节点名
cluster.initial_master_nodes: [&quot;node-1&quot;,&quot;node-2&quot;,&quot;node-3&quot;]
# 集群启动后，复活2个及以上的节点，这个服务才能被使用
gateway.recover_after_nodes: 2
# 允许跨域，可选
http.cors.enabled: true
http.cors.allow-origin: &quot;*&quot;
</code></pre>
<pre><code class="language-yaml"># elasticsearch2.yml
cluster.name: es-cluster-cen
node.name: node-2
node.master: true
node.data: true
node.max_local_storage_nodes: 3
path.data: /usr/share/elasticsearch/data
path.logs: /usr/share/elasticsearch/log
network.host: 0.0.0.0
network.publish_host: y.y.y.y
http.port: 9201
transport.tcp.port: 9301
discovery.seed_hosts: [&quot;x.x.x.x:9300&quot;,&quot;y.y.y.y:9301&quot;,&quot;z.z.z.z:9302&quot;]
cluster.initial_master_nodes: [&quot;node-1&quot;,&quot;node-2&quot;,&quot;node-3&quot;]
gateway.recover_after_nodes: 2
http.cors.enabled: true
http.cors.allow-origin: &quot;*&quot;
</code></pre>
<pre><code class="language-yaml">#elasticsearch3.yml
cluster.name: es-cluster-cen
node.name: node-3
node.master: true
node.data: true
node.max_local_storage_nodes: 3
path.data: /usr/share/elasticsearch/data
path.logs: /usr/share/elasticsearch/log
network.host: 0.0.0.0
network.publish_host: z.z.z.z
http.port: 9202
transport.tcp.port: 9302
discovery.seed_hosts: [&quot;x.x.x.x:9300&quot;,&quot;y.y.y.y:9301&quot;,&quot;z.z.z.z:9302&quot;]
cluster.initial_master_nodes: [&quot;node-1&quot;,&quot;node-2&quot;,&quot;node-3&quot;]
gateway.recover_after_nodes: 2
http.cors.enabled: true
http.cors.allow-origin: &quot;*&quot;
</code></pre>
<p>拉取镜像</p>
<pre><code class="language-shell">docker pull elasticsearch:7.7.0
</code></pre>
<h4 id="启动">启动</h4>
<pre><code class="language-shell">docker run \
-p 9200:9200 \
-p 9300:9300 \
-e ES_JAVA_OPTS=&quot;-Xms256m -Xmx256m&quot; \
-v /etc/elasticsearch/elasticsearch1.yml:/usr/share/elasticsearch/config/elasticsearch.yml \
docker.elastic.co/elasticsearch/elasticsearch:7.7.0 
</code></pre>
<pre><code class="language-shell">docker run \
-p 9201:9201 \
-p 9301:9301 \
-e ES_JAVA_OPTS=&quot;-Xms256m -Xmx256m&quot; \
-v /etc/elasticsearch/elasticsearch2.yml:/usr/share/elasticsearch/config/elasticsearch.yml \
docker.elastic.co/elasticsearch/elasticsearch:7.7.0 
</code></pre>
<pre><code class="language-shell">docker run \
-p 9202:9202 \
-p 9302:9302 \
-e ES_JAVA_OPTS=&quot;-Xms256m -Xmx256m&quot; \
-v /etc/elasticsearch/elasticsearch2.yml:/usr/share/elasticsearch/config/elasticsearch.yml \
docker.elastic.co/elasticsearch/elasticsearch:7.7.0 
</code></pre>
<p>启动完成后，任意访问一个节点查看集群状态:</p>
<pre><code class="language-shell">curl http://127.0.0.1:9200/_cluster/health
</code></pre>
<p>返回</p>
<pre><code class="language-json">{
    &quot;cluster_name&quot;:&quot;es-cluster-cen&quot;,
    &quot;status&quot;:&quot;green&quot;,
    &quot;timed_out&quot;:false,
    &quot;number_of_nodes&quot;:3,
    &quot;number_of_data_nodes&quot;:3,
    &quot;active_primary_shards&quot;:62,
    &quot;active_shards&quot;:93,
    &quot;relocating_shards&quot;:0,
    &quot;initializing_shards&quot;:0,
    &quot;unassigned_shards&quot;:31,
    &quot;delayed_unassigned_shards&quot;:0,
    &quot;number_of_pending_tasks&quot;:0,
    &quot;number_of_in_flight_fetch&quot;:0,
    &quot;task_max_waiting_in_queue_millis&quot;:0,
    &quot;active_shards_percent_as_number&quot;:75
}
</code></pre>
<p>返回结果为集群的基本信息。</p>
<p>参考文档:</p>
<p><a href="https://blog.andycen.com/2020/05/24/Elasticsearch%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D%E4%B8%8E%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/">https://blog.andycen.com/2020/05/24/Elasticsearch%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D%E4%B8%8E%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cordova插件开发]]></title>
        <id>https://akapril.github.io/cordova-plugin/</id>
        <link href="https://akapril.github.io/cordova-plugin/">
        </link>
        <updated>2020-04-23T08:12:24.000Z</updated>
        <summary type="html"><![CDATA[<h4 id="原因">原因</h4>
<p>蓝牙打印机型号：<code>汉印A300(HM-A300-6624)</code></p>
<p>App接入调用蓝牙打印机进行二维码的打印，使用普通<code>cordova</code>蓝牙链接库发送指令，无法打印条形码。</p>
<h4 id="解决方案">解决方案</h4>
<h5 id="安装plugman">安装<code>plugman</code></h5>
<pre><code class="language-bash">npm install -g plugman
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<h4 id="原因">原因</h4>
<p>蓝牙打印机型号：<code>汉印A300(HM-A300-6624)</code></p>
<p>App接入调用蓝牙打印机进行二维码的打印，使用普通<code>cordova</code>蓝牙链接库发送指令，无法打印条形码。</p>
<h4 id="解决方案">解决方案</h4>
<h5 id="安装plugman">安装<code>plugman</code></h5>
<pre><code class="language-bash">npm install -g plugman
</code></pre>
<!-- more -->
<h5 id="创建插件项目">创建插件项目</h5>
<pre><code class="language-bash"># 去掉&lt;&gt;
plugman  create  --name  &lt;插件名&gt;  --plugin_id  &lt;插件id(插件调用名)&gt; --plugin_version &lt;插件版本号(1.0.0)&gt;
</code></pre>
<h5 id="添加需要开发的平台">添加需要开发的平台</h5>
<pre><code class="language-bash"> # 添加android平台
 plugman platform add --platform_name android 
</code></pre>
<h5 id="规范项目">规范项目</h5>
<p>修改生成的<code>java</code>代码包位置。</p>
<pre><code class="language-bash">|   .gitignore
|   package.json
|   plugin.xml
|
|
+---src
|   \---android
|       \---cn
|           \---akapril
|               \---ble
|                       BlePrintPlugin.java
|
\---www
        BlePrintPlugin.js
</code></pre>
<p>修改完目录后需要修改<code>plugin.xml</code>(添加本地<code>jar</code>包处解释)</p>
<h5 id="添加本地jar包">添加本地<code>jar</code>包</h5>
<p>在根目录新建目录<code>libs</code>,将需要的<code>jar</code>包放入目录中。</p>
<p>修改<code>plugin.xml</code>配置</p>
<pre><code class="language-xml">&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;plugin id=&quot;BlePrintPlugin&quot; version=&quot;1.0.0&quot; 
    xmlns=&quot;http://apache.org/cordova/ns/plugins/1.0&quot; 
    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;
    &lt;name&gt;BlePrintPlugin&lt;/name&gt;
    &lt;js-module name=&quot;BlePrintPlugin&quot; src=&quot;www/BlePrintPlugin.js&quot;&gt;
        &lt;clobbers target=&quot;cordova.plugins.BlePrintPlugin&quot; /&gt;
    &lt;/js-module&gt;
    &lt;platform name=&quot;android&quot;&gt;
        &lt;config-file parent=&quot;/*&quot; target=&quot;res/xml/config.xml&quot;&gt;
            &lt;feature name=&quot;BlePrintPlugin&quot;&gt;
                &lt;!-- 修改java代码目录时候对应包 --&gt;
                &lt;param name=&quot;android-package&quot; value=&quot;cn.akapril.ble.BlePrintPlugin&quot; /&gt;
            &lt;/feature&gt;
        &lt;/config-file&gt;
        &lt;config-file parent=&quot;/*&quot; target=&quot;AndroidManifest.xml&quot;&gt;&lt;/config-file&gt;
        &lt;!-- 对应文件 --&gt;
        &lt;source-file src=&quot;libs/CPCL_V1.07.jar&quot; target-dir=&quot;libs&quot;/&gt;
        &lt;source-file src=&quot;src/android/cn/akapril/ble/BlePrintPlugin.java&quot; target-dir=&quot;src/cn/akapril/ble&quot; /&gt;
    &lt;/platform&gt;
&lt;/plugin&gt;
</code></pre>
<h5 id="生成packagejson">生成<code>package.json</code></h5>
<pre><code class="language-bash">#插件目录下生成
plugman createpackagejson .
</code></pre>
<pre><code class="language-bash">name: (BlePrintPlugin)
version: (1.0.0)
description:
git repository: (https://github.com/akapril/BlePrintPlugin.git)
author: akapril
license: (ISC)
About to write to E:\workspace\BlePrintPlugin\package.json:     

{
  &quot;name&quot;: &quot;BlePrintPlugin&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;&quot;,
  &quot;cordova&quot;: {
    &quot;id&quot;: &quot;BlePrintPlugin&quot;,
    &quot;platforms&quot;: [
      &quot;android&quot;
    ]
  },
  &quot;repository&quot;: {
    &quot;type&quot;: &quot;git&quot;,
    &quot;url&quot;: &quot;git+https://github.com/akapril/BlePrintPlugin.git&quot;  
  },
  &quot;keywords&quot;: [
    &quot;ecosystem:cordova&quot;,
    &quot;cordova-android&quot;
  ],
  &quot;author&quot;: &quot;akapril&quot;,
  &quot;license&quot;: &quot;ISC&quot;,
  &quot;bugs&quot;: {
    &quot;url&quot;: &quot;https://github.com/akapril/BlePrintPlugin/issues&quot;   
  },
  &quot;homepage&quot;: &quot;https://github.com/akapril/BlePrintPlugin#readme&quot;
}


Is this OK? (yes) yes
</code></pre>
<h5 id="添加到cordova项目中">添加到<code>cordova</code>项目中</h5>
<pre><code class="language-bash">#去掉&lt;&gt;
# 添加插件
cordova plugin add  &lt;插件项目目录&gt; 
# 去除插件
cordova plugin remove &lt;插件名称&gt;
# 获取github上的插件
cordova plugin add https://github.com/akapril/BlePrintPlugin.git
</code></pre>
<p>参考文档：</p>
<p><a href="https://cordova.apache.org/docs/en/6.x/guide/hybrid/plugins/index.html">https://cordova.apache.org/docs/en/6.x/guide/hybrid/plugins/index.html</a></p>
<p><a href="https://cordova.apache.org/docs/en/6.x/guide/platforms/android/plugin.html">https://cordova.apache.org/docs/en/6.x/guide/platforms/android/plugin.html</a></p>
<p><a href="https://cordova.apache.org/docs/en/6.x/reference/cordova-cli/index.html#cordova-plugin-command">https://cordova.apache.org/docs/en/6.x/reference/cordova-cli/index.html#cordova-plugin-command</a></p>
]]></content>
    </entry>
</feed>